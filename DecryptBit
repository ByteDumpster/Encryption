

def caesar_decrypt_brute_force(ciphertext):
    possible_plaintexts = []
    for shift in range(26): #shift repeats in range for 26 times
        plaintext = ""      #place holder
        for char in ciphertext:         #cipher text is pulled from
            if char.isalpha():
                ascii_code = ord(char)
                shifted_ascii_code = ascii_code - shift
                if char.isupper():
                    if shifted_ascii_code < ord('A'):
                        shifted_ascii_code += 26
                    elif shifted_ascii_code > ord('Z'):
                        shifted_ascii_code -= 26
                elif char.islower():
                    if shifted_ascii_code < ord('a'):
                        shifted_ascii_code += 26
                    elif shifted_ascii_code > ord('z'):
                        shifted_ascii_code -= 26
                plaintext += chr(shifted_ascii_code)
            else:
                plaintext += char
        possible_plaintexts.append(plaintext)
    return possible_plaintexts


def rail_fence_decrypt(ciphertext, rails):
    fence = [[] for i in range(rails)]
    rail = 0
    direction = 1

    for char in ciphertext:
        fence[rail].append(None)
        rail += direction
        if rail == rails - 1 or rail == 0:
            direction = -direction

    index = 0
    for rail in fence:
        for i in range(len(rail)):
            rail[i] = ciphertext[index]
            index += 1

    plaintext = ''
    rail = 0
    direction = 1

    for i in range(len(ciphertext)):
        plaintext += fence[rail][0]
        fence[rail] = fence[rail][1:]
        rail += direction
        if rail == rails - 1 or rail == 0:
            direction = -direction

    return plaintext


def blowfish_decrypt(key, ciphertext):
    cipher = Blowfish.new(key, Blowfish.MODE_CBC)
    plaintext = cipher.decrypt(ciphertext)
    return plaintext.decode('utf-8')
